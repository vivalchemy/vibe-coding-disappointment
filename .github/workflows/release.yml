name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.21'

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if this is a prerelease (contains alpha, beta, rc)
        if [[ $VERSION =~ (alpha|beta|rc) ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Release version: $VERSION"
        echo "Is prerelease: $(echo $VERSION | grep -E '(alpha|beta|rc)' && echo true || echo false)"

  test:
    name: Pre-release Tests
    runs-on: ubuntu-latest
    needs: prepare
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run full test suite
      run: |
        go mod download
        go test -v -race ./...
        
    - name: Run integration tests
      run: |
        make build
        export PATH="$PWD/bin:$PATH"
        go test -v ./test/integration/...

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [prepare, test]
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
            platform: linux-amd64
          - goos: linux
            goarch: arm64
            platform: linux-arm64
          - goos: linux
            goarch: 386
            platform: linux-386
            
          # macOS
          - goos: darwin
            goarch: amd64
            platform: darwin-amd64
          - goos: darwin
            goarch: arm64
            platform: darwin-arm64
            
          # Windows
          - goos: windows
            goarch: amd64
            platform: windows-amd64
            binary_suffix: .exe
          - goos: windows
            goarch: 386
            platform: windows-386
            binary_suffix: .exe
            
          # FreeBSD
          - goos: freebsd
            goarch: amd64
            platform: freebsd-amd64
            
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        
    - name: Download dependencies
      run: go mod download
      
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${{ needs.prepare.outputs.version }}
        BINARY_NAME="wake${{ matrix.binary_suffix }}"
        
        # Build with version information
        go build \
          -ldflags="-s -w -X main.version=${VERSION} -X main.commit=${GITHUB_SHA::8} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o "build/${BINARY_NAME}" \
          ./cmd/wake
          
        # Create archive
        cd build
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "../wake-${VERSION}-${{ matrix.platform }}.zip" "${BINARY_NAME}"
        else
          tar -czf "../wake-${VERSION}-${{ matrix.platform }}.tar.gz" "${BINARY_NAME}"
        fi
        cd ..
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wake-${{ matrix.platform }}
        path: wake-${{ needs.prepare.outputs.version }}-${{ matrix.platform }}.*
        retention-days: 7

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [prepare, test]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          vivalchemy/wake
          ghcr.io/vivalchemy/wake
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.prepare.outputs.version }}
          COMMIT=${GITHUB_SHA::8}
          BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        cache-from: type=gha
        cache-to: type=gha,mode=max

  package:
    name: Create Packages
    runs-on: ubuntu-latest
    needs: [prepare, build]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
        
    - name: Set up Ruby (for FPM)
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        
    - name: Install packaging tools
      run: |
        gem install fpm
        sudo apt-get update
        sudo apt-get install -y rpm
        
    - name: Create DEB package
      run: |
        VERSION=${{ needs.prepare.outputs.version }}
        VERSION_NO_V=${VERSION#v}
        
        # Extract Linux AMD64 binary
        cd artifacts/wake-linux-amd64
        tar -xzf wake-${VERSION}-linux-amd64.tar.gz
        cd ../..
        
        # Create DEB package
        fpm -s dir -t deb \
          --name wake \
          --version ${VERSION_NO_V} \
          --description "Universal Task Runner - A unified interface for various build tools and task runners" \
          --url "https://github.com/vivalchemy/wake" \
          --maintainer "VivAlchemy <hello@vivalchemy.com>" \
          --license "MIT" \
          --architecture amd64 \
          --depends "libc6" \
          artifacts/wake-linux-amd64/wake=/usr/local/bin/wake
          
    - name: Create RPM package
      run: |
        VERSION=${{ needs.prepare.outputs.version }}
        VERSION_NO_V=${VERSION#v}
        
        # Create RPM package
        fpm -s dir -t rpm \
          --name wake \
          --version ${VERSION_NO_V} \
          --description "Universal Task Runner - A unified interface for various build tools and task runners" \
          --url "https://github.com/vivalchemy/wake" \
          --maintainer "VivAlchemy <hello@vivalchemy.com>" \
          --license "MIT" \
          --architecture x86_64 \
          artifacts/wake-linux-amd64/wake=/usr/local/bin/wake
          
    - name: Upload packages
      uses: actions/upload-artifact@v3
      with:
        name: wake-packages
        path: |
          *.deb
          *.rpm
        retention-days: 7

  homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.is_prerelease == 'false'
    
    steps:
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v2
      with:
        formula-name: wake
        formula-path: Formula/wake.rb
        homebrew-tap: vivalchemy/homebrew-tap
        download-url: https://github.com/vivalchemy/wake/releases/download/${{ needs.prepare.outputs.version }}/wake-${{ needs.prepare.outputs.version }}-darwin-amd64.tar.gz
        commit-message: |
          wake ${{ needs.prepare.outputs.version }}
          
          Automated update for wake ${{ needs.prepare.outputs.version }}
      env:
        COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, build, package]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
        
    - name: Generate changelog
      id: changelog
      run: |
        VERSION=${{ needs.prepare.outputs.version }}
        
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "## What's Changed" > changelog.md
          echo "" >> changelog.md
          
          # Generate changelog from commits
          git log --pretty=format:"* %s (%h)" ${PREV_TAG}..HEAD >> changelog.md
          echo "" >> changelog.md
          echo "" >> changelog.md
        else
          echo "## Initial Release" > changelog.md
          echo "" >> changelog.md
          echo "First release of Wake - Universal Task Runner" >> changelog.md
          echo "" >> changelog.md
        fi
        
        # Add installation instructions
        cat >> changelog.md << 'EOF'
        ## Installation
        
        ### Binary Downloads
        Download the appropriate binary for your platform from the assets below.
        
        ### Package Managers
        ```
        # Homebrew (macOS/Linux)
        brew install vivalchemy/tap/wake
        
        # Go install
        go install github.com/vivalchemy/wake@latest
        ```
        
        ### Docker
        ```
        docker pull vivalchemy/wake:latest
        # or
        docker pull ghcr.io/vivalchemy/wake:latest
        ```
        
        ## Checksums
        ```
        EOF
        
        # Generate checksums
        find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          sha256sum "$file" >> changelog.md
        done
        
        echo '```' >> changelog.md
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare.outputs.version }}
        name: Wake ${{ needs.prepare.outputs.version }}
        body_path: changelog.md
        prerelease: ${{ needs.prepare.outputs.is_prerelease }}
        files: |
          artifacts/wake-*/wake-*
          *.deb
          *.rpm
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Post-release Notifications
    runs-on: ubuntu-latest
    needs: [prepare, release]
    if: always()
    
    steps:
    - name: Notify Discord
      if: success()
      run: |
        curl -H "Content-Type: application/json" \
             -d "{\"content\": \"🚀 Wake ${{ needs.prepare.outputs.version }} has been released! https://github.com/vivalchemy/wake/releases/tag/${{ needs.prepare.outputs.version }}\"}" \
             ${{ secrets.DISCORD_WEBHOOK_URL }}
             
    - name: Notify on failure
      if: failure()
      run: |
        curl -H "Content-Type: application/json" \
             -d "{\"content\": \"❌ Release workflow failed for Wake ${{ needs.prepare.outputs.version }}. Check: https://github.com/vivalchemy/wake/actions\"}" \
             ${{ secrets.DISCORD_WEBHOOK_URL }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    
    steps:
    - name: Delete workflow artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          wake-*
        failOnError: false
