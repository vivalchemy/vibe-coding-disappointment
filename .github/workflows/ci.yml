name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.20', '1.21']
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
        
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Build binary
      run: |
        make build
        
    - name: Test installation
      run: |
        ./bin/wake --version
        ./bin/wake --help
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wake-binary-${{ github.sha }}
        path: bin/wake
        retention-days: 7
        
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, build]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install task runners
      run: |
        # Install just
        curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
        
        # Install go-task
        sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
        
        # Install make (usually pre-installed)
        sudo apt-get update && sudo apt-get install -y make
        
        # Install npm packages
        npm install -g pnpm yarn
        
    - name: Download dependencies
      run: go mod download
      
    - name: Build wake
      run: make build
      
    - name: Run integration tests
      run: |
        export PATH="$PWD/bin:$PATH"
        go test -v ./test/integration/...
        
    - name: Test with sample projects
      run: |
        export PATH="$PWD/bin:$PATH"
        
        # Test makefile project
        cd test/fixtures/makefile-project
        wake list
        wake --dry-run test
        cd ../../..
        
        # Test npm project
        cd test/fixtures/npm-project
        wake list
        wake --dry-run test
        cd ../../..
        
        # Test just project
        cd test/fixtures/just-project
        wake list
        wake --dry-run test
        cd ../../..
        
        # Test mixed project
        cd test/fixtures/mixed-project
        wake list
        wake --runner=make list
        wake --runner=npm list
        cd ../../..
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'
        
    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
        
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Download dependencies
      run: go mod download
      
    - name: Build wake
      run: make build
      
    - name: Run benchmark tests
      run: |
        go test -bench=. -benchmem ./...
        
    - name: Performance regression test
      run: |
        export PATH="$PWD/bin:$PATH"
        
        # Test discovery performance
        time wake list > /dev/null
        
        # Test with large project simulation
        mkdir -p /tmp/large-project
        for i in {1..100}; do
          echo "test$i:" > "/tmp/large-project/Makefile$i"
          echo -e "\techo 'test $i'" >> "/tmp/large-project/Makefile$i"
        done
        
        cd /tmp/large-project
        time wake list > /dev/null
        
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Generate documentation
      run: |
        go install golang.org/x/tools/cmd/godoc@latest
        make docs
        
    - name: Check documentation completeness
      run: |
        # Check if all public functions have documentation
        go install github.com/godoctor/godoctor@latest
        godoctor -complete ./...
        
    - name: Validate README examples
      run: |
        make build
        export PATH="$PWD/bin:$PATH"
        
        # Test examples from README
        wake --help
        wake --version
        wake list --help
        wake run --help
        
  compatibility:
    name: Compatibility Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task-runner:
          - make
          - npm
          - yarn
          - pnpm
          - just
          - task
          
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
      if: matrix.task-runner == 'npm' || matrix.task-runner == 'yarn' || matrix.task-runner == 'pnpm'
        
    - name: Install task runner
      run: |
        case "${{ matrix.task-runner }}" in
          "make")
            sudo apt-get update && sudo apt-get install -y make
            ;;
          "npm")
            # Already installed with Node.js
            ;;
          "yarn")
            npm install -g yarn
            ;;
          "pnpm")
            npm install -g pnpm
            ;;
          "just")
            curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
            ;;
          "task")
            sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
            ;;
        esac
        
    - name: Build wake
      run: make build
      
    - name: Test runner compatibility
      run: |
        export PATH="$PWD/bin:$PATH"
        
        case "${{ matrix.task-runner }}" in
          "make")
            cd test/fixtures/makefile-project
            ;;
          "npm"|"yarn"|"pnpm")
            cd test/fixtures/npm-project
            ;;
          "just")
            cd test/fixtures/just-project
            ;;
          "task")
            cd test/fixtures/task-project
            ;;
        esac
        
        # Test discovery
        wake --runner=${{ matrix.task-runner }} list
        
        # Test dry run
        if [ "${{ matrix.task-runner }}" != "task" ]; then
          wake --runner=${{ matrix.task-runner }} --dry-run test || echo "Test task not available"
        fi
